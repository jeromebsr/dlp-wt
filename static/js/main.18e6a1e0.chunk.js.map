{"version":3,"sources":["components/Search.js","components/WaitTime.js","App.js","index.js"],"names":["Search","WaitTime","_useState","useState","_useState2","Object","slicedToArray","entity","setEntity","_useState3","_useState4","waitTimeId","setWaitTimeId","_useState5","_useState6","waitTimeMin","setWaitTimeMin","_useState7","_useState8","WaitTimeMax","setWaitTimeMax","_useState9","_useState10","data","setData","_useState11","_useState12","filter","setFilter","_useState13","_useState14","filterStatus","setFilterStatus","waitTimeColor","wt","setColor","useEffect","axios","get","concat","then","res","liveData","react_default","a","createElement","Container","className","Form","Control","size","type","placeholder","onChange","e","target","value","ButtonGroup","id","name","map","park","Button","key","variant","onClick","Col","btnStyle","min","max","wl","ListGroup","includes","dataFilter","arr","split","i","length","charAt","toUpperCase","slice","join","formatFilter","queue","STANDBY","waitTime","status","sort","b","el","Item","parkId","Alert","App","components_WaitTime","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.18e6a1e0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Container, Button, Form } from 'react-bootstrap';\r\n\r\nfunction Search() {\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    return (\r\n        <Container className='mt-5'>\r\n             <Form className='mb-3'>\r\n                <Form.Control \r\n                    size=\"lg\"\r\n                    type=\"text\"\r\n                    placeholder=\"Chercher une attraction...\" \r\n                    onChange={(e) => (setSearch(e.target.value))}\r\n                />\r\n            </Form>\r\n            <Button \r\n                style={{ marginRight:10 }}\r\n            >\r\n                Disneyland Park\r\n            </Button>\r\n            <Button>\r\n                Walt Disney Studios Park\r\n            </Button>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Search;","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Container, Alert, ListGroup, Button, ButtonGroup, Form, Col } from 'react-bootstrap';\r\n\r\nfunction WaitTime() {\r\n    const [entity, setEntity] = useState(\"e8d0207f-da8a-4048-bec8-117aa946b2c2\");\r\n    const [waitTimeId, setWaitTimeId] = useState(1);\r\n    const [waitTimeMin, setWaitTimeMin] = useState(0);\r\n    const [WaitTimeMax, setWaitTimeMax] = useState(900);\r\n    const [data, setData] = useState([]);\r\n    const [filter, setFilter] = useState(\"\");\r\n    const [filterStatus, setFilterStatus] = useState(\"OPERATING\");\r\n    \r\n    const parksList = [\r\n        {\r\n            id: \"e8d0207f-da8a-4048-bec8-117aa946b2c2\",\r\n            name: \"Tous les Parcs\",\r\n        },\r\n        {\r\n            id: \"dae968d5-630d-4719-8b06-3d107e944401\",\r\n            name: \"Disneyland Park\",\r\n        },\r\n        {\r\n            id: \"ca888437-ebb4-4d50-aed2-d227f7096968\",\r\n            name: \"Walt Disney Studios Park\",\r\n        },\r\n    ];\r\n\r\n    const waitTimeList = [\r\n        {\r\n            id: 1,\r\n            name: \"Tous les temps\",\r\n            btnStyle: \"primary\",\r\n            min: 0,\r\n            max: 900\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Moins de 15 min\",\r\n            btnStyle: \"success\",\r\n            min: 0,\r\n            max: 15\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Entre 15 et 45 min\",\r\n            btnStyle: \"warning\",\r\n            min: 15,\r\n            max: 45\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Plus de 45 min\",\r\n            btnStyle: \"danger\",\r\n            min: 45,\r\n            max: 900\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Fermé\",\r\n            btnStyle: \"secondary\",\r\n            min: null,\r\n            max: null\r\n        },\r\n    ];\r\n\r\n    const parkName = (id) => {\r\n        if(id === \"dae968d5-630d-4719-8b06-3d107e944401\") {\r\n            return \"Parc Disneyland\"\r\n        }else if (id === \"ca888437-ebb4-4d50-aed2-d227f7096968\") {\r\n            return \"Parc Walt Disney Studios\"\r\n        }else {\r\n            return \"error\";\r\n        }\r\n    }\r\n\r\n    const waitTimeColor = (wt) => {\r\n        let setColor = \"dark\";\r\n\r\n        if(wt > 0) {\r\n            if(wt <= 15) {\r\n                setColor = \"success\";\r\n            }else if(wt > 15 && wt <= 45) {\r\n                setColor = \"warning\";\r\n            }else if (wt > 45) {\r\n                setColor = \"danger\";\r\n            }\r\n        }else if(wt === 0) {\r\n            setColor = \"success\";\r\n        }else {\r\n            setColor = \"secondary\"\r\n        }\r\n\r\n        return setColor;\r\n    }\r\n\r\n    const displayWaitTime = (wt) => {\r\n        if(wt === null) {\r\n            return \"Fermé\";\r\n        }else if (wt === 0) {\r\n            return \"Ouvert\";\r\n        } else {\r\n            return wt + \" minutes\";\r\n        }\r\n    }\r\n\r\n    const formatFilter = (dataFilter) => {\r\n        const arr = dataFilter.split(\" \");\r\n\r\n        for(let i = 0; i < arr.length; i++) {\r\n            if(arr[i].charAt(0))\r\n            arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n        }\r\n\r\n        return arr.join(\" \");\r\n    }\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(`https://api.themeparks.wiki/v1/entity/${entity}/live`)\r\n            .then((res) => setData(res.data.liveData))\r\n    });\r\n\r\n    return (\r\n        <Container className='mt-5 mb-5'>\r\n            <Form className='mb-3'>\r\n                <Form.Control \r\n                    size=\"lg\"\r\n                    type=\"text\"\r\n                    placeholder=\"Chercher une attraction...\" \r\n                    onChange={(e) => (setFilter(e.target.value))}\r\n                />\r\n            </Form>\r\n            <h6>Choisir un parc :</h6>\r\n            <ButtonGroup>\r\n                {\r\n                    parksList.map((park) => (\r\n                        <Button\r\n                            key={park.id}\r\n                            variant={park.id === entity ? \"primary\" : \"outline-primary\"}\r\n                            onClick={() => {\r\n                                setEntity(park.id);\r\n                            }}\r\n                        >\r\n                            {park.name}        \r\n                        </Button>\r\n                    ))\r\n                }\r\n            </ButtonGroup>\r\n            <Col className='mt-2'>\r\n                <h6>Trier par temps d'attente :</h6>\r\n                <ButtonGroup>\r\n                   {\r\n                       waitTimeList.map((wl) => (\r\n                           <Button\r\n                                key={wl.id}\r\n                                variant={wl.id === waitTimeId ? wl.btnStyle : \"outline-\"+wl.btnStyle}\r\n                                onClick={() => {\r\n                                    setWaitTimeId(wl.id);\r\n                                    \r\n                                    if(wl.min === null) {\r\n                                        setFilterStatus(\"CLOSED\")\r\n                                    }else {\r\n                                        setFilterStatus(\"OPERATING\")\r\n                                        setWaitTimeMin(wl.min);\r\n                                        setWaitTimeMax(wl.max);\r\n                                    }\r\n                                }}\r\n                           >\r\n                               {wl.name}\r\n                           </Button>\r\n\r\n                       ))\r\n                   }\r\n                </ButtonGroup>\r\n            </Col>\r\n            {\r\n                <ListGroup className='mt-5'> \r\n                    {\r\n                    data\r\n                    .filter((data) => data.name.includes(formatFilter(filter)))\r\n                    .filter((data) => filterStatus === \"OPERATING\" ? data.queue.STANDBY.waitTime > waitTimeMin && data.queue.STANDBY.waitTime < WaitTimeMax : data.status.includes(filterStatus))\r\n                    .sort((a,b) => (a.queue.STANDBY.waitTime - b.queue.STANDBY.waitTime))\r\n                    .map((el) => (\r\n                        <ListGroup.Item key={el.id}>\r\n                            <h2>{el.name}</h2>\r\n                            <h5>{parkName(el.parkId)}</h5>\r\n                            <Alert variant={waitTimeColor(el.queue.STANDBY.waitTime)}>\r\n                                <i className=\"fa-solid fa-clock\"></i> <b>{displayWaitTime(el.queue.STANDBY.waitTime)}</b>\r\n                            </Alert>\r\n                        </ListGroup.Item>   \r\n                    ))}\r\n                </ListGroup>\r\n            }\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default WaitTime;\r\n","import React from 'react';\nimport Search from './components/Search';\nimport WaitTime from './components/WaitTime';\n\n\nfunction App() {\n  return (\n    <div>\n      <WaitTime />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport '../src/styles/globals.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}